#version 330 core
#define MAX_JOINTS 128

uniform sampler2D iTexture0; // Albedo
uniform sampler2D iTexture1; // Specular
uniform sampler2D iTexture2; // Smoothness
uniform sampler2D iTexture3; // Normal
uniform sampler2D iTexture4; // Height
uniform sampler2D iTexture5; // Occulusion
uniform sampler2D iTexture6; // Emission
uniform sampler2D iTexture7; // Detail Mask
uniform sampler2D iTexture8; // Detail Albedo
uniform sampler2D iTexture9; // Detail Normal
uniform samplerCube iCubeTexture0; // Skybox
uniform samplerCube iCubeTexture1; // Skybox Radiance
uniform samplerCube iCubeTexture2; // Skybox Irradiance

uniform vec4 iLeftEye;
uniform vec4 iMouse;
uniform vec4 iResolution;
uniform vec4 iGlobalTime;

uniform mat4 iMiscRoomData;
uniform vec4 iPlayerPosition;
uniform vec4 iUseClipPlane;
uniform vec4 iClipPlane;
uniform vec4 iFogEnabled;
uniform vec4 iFogMode;
uniform vec4 iFogDensity;
uniform vec4 iFogStart;
uniform vec4 iFogEnd;
uniform vec4 iFogCol;
uniform mat4 iRoomMatrix;

uniform mat4 iMiscObjectData;
uniform vec4 iConstColour;
uniform vec4 iChromaKeyColour;
uniform vec4 iUseLighting;
uniform vec4 iObjectPickID;
uniform mat4 iModelMatrix;
uniform mat4 iViewMatrix;
uniform mat4 iProjectionMatrix;
uniform mat4 iInverseViewMatrix;
uniform mat4 iModelViewMatrix;
uniform mat4 iModelViewProjectionMatrix;
uniform mat4 iTransposeInverseModelMatrix;
uniform mat4 iTransposeInverseModelViewMatrix;
uniform vec4 iBlend;
uniform vec4 iUseSkelAnim;
uniform mat4 iSkelAnimJoints[MAX_JOINTS];

uniform vec4 iAmbient;
uniform vec4 iDiffuse;
uniform vec4 iSpecular;
uniform vec4 iShininess;
uniform vec4 iUseTexture[4];

// Fragment Shader Inputs
smooth in vec2 iTexCoord0;

// Fragment Shader Outputs
layout(location = 0) out vec4 out_color;
void main()
{
	//vec2 dimensions = vec2(1280.0, 720.0);
	//ivec2 coords = ivec2(dimensions * iTexCoord0);
	ivec2 coords = ivec2(gl_FragCoord.x, gl_FragCoord.y);

	vec4 color = vec4(0.0);
	for (int i = 0; i < 4; i++)
	{
		color += texelFetch(iTexture0, coords, i);
	}
	color *= vec4(0.25);
	
	out_color = color;
	gl_FragDepth = texelFetch(iTexture3, coords, 0).r;
}
